I"C<p>참고자료 <br />
<a href="https://github.com/ll0301/architecture-samples/tree/todo-mvvm-live-kotlin">https://github.com/ll0301/architecture-samples/tree/todo-mvvm-live-kotlin</a>
<a href="https://two22.tistory.com/12">https://two22.tistory.com/12</a></p>

<p>이전에 만들었던 introActivity를 test해보자.</p>
<h2 id="buildgradlemoduleapp">build.gradle(Module:app)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    // local unit test
    testImplementation 'androidx.test.ext:junit:1.1.2'

    // android unit test
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    // android ui test
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.3.0'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.3.0'
</code></pre></div></div>
<ul>
  <li>각각에 대한 설명
    <h2 id="androidtestintroscreentestkt">(androidTest)IntroScreenTest.kt</h2>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@RunWith(AndroidJUnit4::class)
@LargeTest
class IntroScreenTest {
...
}
</code></pre></div>    </div>
  </li>
  <li>@RunWith(AndroidJUnit4::class)</li>
  <li>@LargeTest</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    @get: Rule
    var activityScenarioRule: ActivityScenarioRule&lt;IntroActivity&gt; =
        ActivityScenarioRule(
            Intent(
                ApplicationProvider.getApplicationContext(),
                IntroActivity::class.java
            ).apply { putExtra("MyArgs", "Nothing") })
</code></pre></div></div>
<ul>
  <li>@get:Rule</li>
  <li>ActivityScenarioRule</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    @Before
    fun setUp() {
        activityScenarioRule.scenario.onActivity { it -&gt;
            (it.findViewById&lt;ConstraintLayout&gt;(R.id.intro_cl))?.let {
            
            }
            (it.findViewById&lt;TextView&gt;(R.id.intro_logo))?.let {
                // it.text = "ChangeUI"
            }
        }
    }
    
    @After
    fun close() {
        activityScenarioRule.scenario.close()
    }
</code></pre></div></div>
<ul>
  <li>@Before</li>
  <li>@After</li>
  <li>ActivityScenarioRule.scenario</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    @Test
    fun resultTest() {
        activityScenarioRule.scenario.onActivity {
            it.setResult(Activity.RESULT_OK, Intent().apply { putExtra("Result", "Ok") })
            it.finish()
        }
        Assert.assertEquals(activityScenarioRule.scenario.result.resultCode, Activity.RESULT_OK)
        val result = activityScenarioRule.scenario.result.resultData?.extras?.getString("Result")
        Assert.assertEquals(result, "Ok")
    }
</code></pre></div></div>
<ul>
  <li>@Test</li>
  <li>ActivityScenarioRule.scenario.onActivity {}</li>
  <li>Assert</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    @Test
    fun moveToStateTest() {
        activityScenarioRule.scenario?.let {
            it.moveToState(Lifecycle.State.STARTED)
            Assert.assertEquals(it.state, Lifecycle.State.STARTED)
            it.moveToState(Lifecycle.State.CREATED)
            Assert.assertEquals(it.state, Lifecycle.State.CREATED)
            it.moveToState(Lifecycle.State.RESUMED)
            Assert.assertEquals(it.state, Lifecycle.State.RESUMED)
            it.moveToState(Lifecycle.State.DESTROYED)
            Assert.assertEquals(it.state, Lifecycle.State.DESTROYED)
            // activityScenario.recreate()
        }
    }
</code></pre></div></div>
<ul>
  <li>moveToStae()</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lateinit var activityScenario: ActivityScenario&lt;IntroActivity&gt;
    
    @Before
    fun setUp() {
        activityScenario = ActivityScenario.launch(
            Intent(
                ApplicationProvider.getApplicationContext(),
                IntroActivity::class.java
            ).apply {
                putExtra("MyArgs", "Nothing")
            })
        
        activityScenario.onActivity {
            (it.findViewById&lt;ConstraintLayout&gt;(R.id.intro_cl))?.let {
            
            }
        }
    }
</code></pre></div></div>
<ul>
  <li>ActivityScenario만 단독으로 사용 가능</li>
</ul>
:ET