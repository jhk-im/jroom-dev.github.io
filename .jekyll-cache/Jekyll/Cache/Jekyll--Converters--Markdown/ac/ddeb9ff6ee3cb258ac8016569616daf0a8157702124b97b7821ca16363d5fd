I" <p float="center">
  <img src="/assets/images/gif/2020-10-2516-05.gif" width="300" />
</p>

<p>의존성 주입(Dependency Injection)을 구현하는 dagger-hilt eample을 공부하고 정리한 글</p>

<p>참고자료 <br />
<a href="https://developer.android.com/training/dependency-injection/hilt-android?hl=ko">Hilt - 공식문서</a> <br />
<a href="https://codelabs.developers.google.com/codelabs/android-hilt/?hl=ko#0">Hilt - Example</a></p>
<h2 id="dependency-injection과-hilt"><code class="language-plaintext highlighter-rouge">Dependency Injection</code>과 <code class="language-plaintext highlighter-rouge">Hilt</code></h2>
<p><code class="language-plaintext highlighter-rouge">Dependency Injection</code> 줄여서 <code class="language-plaintext highlighter-rouge">DI</code>는 프로그래밍에 널리 사용되며 안드로이드 개발에 잘 맞는 기술이다. <code class="language-plaintext highlighter-rouge">DI</code>의 원칠을 따르면 좋은 앱 아키텍처의 기초를 갖출 수 있다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DI</code>의 장점</li>
  <li>코드의 재사용성</li>
  <li>리팩토링 용이성</li>
  <li>테스트 용이성</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Hilt</code>는 Android를 위한 <code class="language-plaintext highlighter-rouge">DI</code> 라이브러리이다. <code class="language-plaintext highlighter-rouge">DI</code>를 구현하려면 모든 클래스와 그 종속성을 수동으로 구성하고 컨테이너를 사용하여 재사용할 수 있도록 관리해야한다.  <br />
<code class="language-plaintext highlighter-rouge">Hilt</code>는 프로젝트의 모든 Android 구성요소에 컨테이너를 제공하고 컨테이너의 수명주기를 자동으로 관리함으로써 <code class="language-plaintext highlighter-rouge">DI</code>를 수행하는 표준을 제공한다. <br />
Android의 인기있는 라이브러리인 <code class="language-plaintext highlighter-rouge">Dagger</code>를 활용함으로써 완성된다.</p>

<p>결국 해당 예제는 <code class="language-plaintext highlighter-rouge">DI</code>를 이해하는 것을 중점으로 두고 <code class="language-plaintext highlighter-rouge">Hilt</code>가 어떠한 편리함을 가져다 주는지 그리고 그안에서 <code class="language-plaintext highlighter-rouge">Dagger</code>가 어떻게 활용되는지를 알아가는것이 목표이다.</p>

<p>참고자료 <br />
<a href="https://developer.android.com/training/dependency-injection/manual?hl=ko">DI - 공식문서</a> <br />
<a href="https://developer.android.com/training/dependency-injection/manual?hl=ko">수동 DI - 공식문서</a> <br />
<a href="https://developer.android.com/training/dependency-injection/dagger-basics?hl=ko">Dagger - 공식문서</a></p>

<h2 id="why-hilt">Why <code class="language-plaintext highlighter-rouge">Hilt</code>?</h2>
<p>다음의 코드는 실제 예제에서 사용되는 코드이다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//LogApplication.kt

@GenerateComponents
@AndroidEntryPoint
class LogApplication : Application()
</code></pre></div></div>

<ul>
  <li>LogApplication 클래스에 저장된 
왜 힐트?
시작 코드를 살펴보면 LogApplication 클래스에 저장된 ServiceLocator 클래스의 인스턴스를 볼 수 있다. ServiceLocator는 필요한 클래스에 의해 요청 시 획득되는 종속성을 생성하고 저장한다. 앱이 그렇게 되면 파괴되기 때문에 앱의 라이프사이클에 부착된 종속성의 컨테이너라고 생각하면 된다.</li>
</ul>

<p>컨테이너는 코드베이스에서 종속성 제공을 담당하는 클래스로서 다른 유형의 앱 인스턴스를 만드는 방법을 알고 있다. 이러한 인스턴스를 생성하고 라이프사이클을 관리하여 해당 인스턴스를 제공하는 데 필요한 종속성 그래프를 관리한다.</p>

<p>컨테이너는 컨테이너가 제공하는 유형의 인스턴스를 가져오는 방법을 제공한다. 이러한 방법은 항상 다른 인스턴스나 동일한 인스턴스를 반환할 수 있다. 방법이 항상 동일한 인스턴스를 제공한다면, 우리는 그 유형이 컨테이너까지 범위가 정해져 있다고 말한다.</p>
:ET