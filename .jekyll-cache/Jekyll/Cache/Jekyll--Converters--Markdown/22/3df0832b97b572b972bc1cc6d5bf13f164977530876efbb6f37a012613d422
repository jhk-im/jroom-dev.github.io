I"-<p float="center">
  <img src="/assets/images/gif/2020-10-2516-05.gif" width="300" />
</p>

<p>의존성 주입(Dependency Injection)을 구현하는 dagger-hilt eample을 공부하고 정리한 글</p>

<p>참고자료 <br />
<a href="https://developer.android.com/training/dependency-injection/hilt-android?hl=ko">Hilt - 공식문서</a> <br />
<a href="https://codelabs.developers.google.com/codelabs/android-hilt/?hl=ko#0">Hilt - Example</a></p>
<h2 id="dependency-injection과-hilt"><code class="language-plaintext highlighter-rouge">Dependency Injection</code>과 <code class="language-plaintext highlighter-rouge">Hilt</code></h2>
<p><code class="language-plaintext highlighter-rouge">Dependency Injection</code> 줄여서 <code class="language-plaintext highlighter-rouge">DI</code>는 프로그래밍에 널리 사용되며 안드로이드 개발에 잘 맞는 기술이다. <code class="language-plaintext highlighter-rouge">DI</code>의 원칠을 따르면 좋은 앱 아키텍처의 기초를 갖출 수 있다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DI</code>의 장점</li>
  <li>코드의 재사용성</li>
  <li>리팩토링 용이성</li>
  <li>테스트 용이성</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Hilt</code>는 Android를 위한 <code class="language-plaintext highlighter-rouge">DI</code> 라이브러리이다. <code class="language-plaintext highlighter-rouge">DI</code>를 구현하려면 모든 클래스와 그 종속성을 수동으로 구성하고 컨테이너를 사용하여 재사용할 수 있도록 관리해야한다.  <br />
<code class="language-plaintext highlighter-rouge">Hilt</code>는 프로젝트의 모든 Android 구성요소에 컨테이너를 제공하고 컨테이너의 수명주기를 자동으로 관리함으로써 <code class="language-plaintext highlighter-rouge">DI</code>를 수행하는 표준을 제공한다. <br />
Android의 인기있는 라이브러리인 <code class="language-plaintext highlighter-rouge">Dagger</code>를 활용함으로써 완성된다.</p>

<p>결국 해당 예제는 <code class="language-plaintext highlighter-rouge">DI</code>를 이해하는 것을 중점으로 두고 <code class="language-plaintext highlighter-rouge">Hilt</code>가 어떠한 편리함을 가져다 주는지 그리고 그안에서 <code class="language-plaintext highlighter-rouge">Dagger</code>가 어떻게 활용되는지를 알아가는것이 목표이다.</p>

<p>참고자료 <br />
<a href="https://developer.android.com/training/dependency-injection/manual?hl=ko">DI - 공식문서</a> <br />
<a href="https://developer.android.com/training/dependency-injection/manual?hl=ko">수동 DI - 공식문서</a> <br />
<a href="https://developer.android.com/training/dependency-injection/dagger-basics?hl=ko">Dagger - 공식문서</a></p>

<h2 id="di의-기본사항"><code class="language-plaintext highlighter-rouge">DI</code>의 기본사항</h2>
<p><a href="https://developer.android.com/training/dependency-injection?hl=ko">공식문서</a> <br />
클래스에는 흔히 다른 클래스의 참조가 필요하다. 예를들면 <code class="language-plaintext highlighter-rouge">Car</code> 클래스는 <code class="language-plaintext highlighter-rouge">Engine</code>클래스 참조가 필요할 수 있다. 여기서 <code class="language-plaintext highlighter-rouge">Engine</code>클래스를 종속 항목이라한다.</p>

<p>!! 종속항목이 없는 경우</p>
<ul>
  <li>클래스가 필요한 종속 항목을 구성</li>
  <li><code class="language-plaintext highlighter-rouge">Car</code>클래스가 자체적으로 <code class="language-plaintext highlighter-rouge">Engine</code> 인스턴스를 생성하여 초기화한다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Car {

    private val engine = Engine()

    fun start() {
        engine.start()
    }
}

fun main(args: Array) {
    val car = Car()
    car.start()
}
</code></pre></div></div>
<p>문제점</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Car</code>와 <code class="language-plaintext highlighter-rouge">Engine</code>은 밀접하게 연관되어 있다. <code class="language-plaintext highlighter-rouge">Car</code>인스턴스는 한가지 유형의 <code class="language-plaintext highlighter-rouge">Engine</code>을 사용하므로 서브클래스 또는 대체구현을 쉽게 사용할 수 없다.</li>
  <li><code class="language-plaintext highlighter-rouge">Engine</code>이라는 강력한 종속항목은 테스트를 어렵게 만든다.
    <ul>
      <li>실제 <code class="language-plaintext highlighter-rouge">Engine</code> 인스턴스를 사용하므로 테스트더블을 적용할 수 없다.</li>
    </ul>
  </li>
</ul>

<p>!! 종송항목의 활용</p>
<ul>
  <li>객체를 매개변수로 제공받는다.</li>
  <li><code class="language-plaintext highlighter-rouge">Car</code>생성자는 <code class="language-plaintext highlighter-rouge">Engine</code>을 매개변수로 받는다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Car(private val engine: Engine) {
    fun start() {
        engine.start()
    }
}

fun main(args: Array) {
    val engine = Engine()
    val car = Car(engine)
    car.start()
}
</code></pre></div></div>
<p>장점</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Car</code> 재사용성 증가
    <ul>
      <li>다양한 <code class="language-plaintext highlighter-rouge">Engine</code>의 인스턴스를 <code class="language-plaintext highlighter-rouge">Car</code>에 전달할 수 있다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">ElectricEngine</code>이라는 <code class="language-plaintext highlighter-rouge">Engine</code>의 서브클래스를 정의하고 <code class="language-plaintext highlighter-rouge">Car</code>에 전달하면 추가 변경없이 계속 동작한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Car</code>테스트 편리함 증가
    <ul>
      <li>다양한 시나리오를 테스트할 수 있다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">FakeEngine</code>이라는 테스트 더블을 생성하여 다양한 테스트를 구성할 수 있다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>위 방법과 더불어 필드 또는 setter를 삽입하는 다음의 방법이 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Car {
    lateinit var engine: Engine

    fun start() {
        engine.start()
    }
}
</code></pre></div></div>
<p>위 예제는 라이브러리를 사용하지 않고 종속 항목을 직접 생성, 제공 및 관리하였다.</p>
:ET